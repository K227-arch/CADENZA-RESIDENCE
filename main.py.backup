import asyncio
import io
import os
import wave
import json
import base64 # For encoding/decoding binary data for WebSocket transmission
import load_dotenv

from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles # Import StaticFiles for serving static files

from google import genai
from google.genai import types
# Libraries for audio processing (same as your original code)
import soundfile as sf
import librosa

# --- Configuration ---
# IMPORTANT: Load your API key securely from environment variables.
# DO NOT hardcode your API key in production code.
# On your server, you would set an environment variable like:
# export GEMINI_API_KEY="YOUR_ACTUAL_GEMINI_API_KEY"
load_dotenv.load_dotenv()

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise ValueError("GEMINI_API_KEY environment variable not set.")

# Initialize the GenAI client with correct configuration
client = genai.Client(
    api_key=GEMINI_API_KEY,
    http_options={'api_version': 'v1alpha'}
)

# Gemini Live Audio model configuration
# Using the correct model name for Live API
model = "gemini-2.0-flash-exp"
config = types.LiveConnectConfig(
    response_modalities=["AUDIO"],
    system_instruction="You are a helpful assistant for the Cadenza Residence virtual tour. Answer in a friendly tone."
)

# Initialize FastAPI app
app = FastAPI()

# --- Serve Static Files ---
# Mount the current directory to serve all static assets
app.mount("/loading", StaticFiles(directory="loading"), name="loading")
app.mount("/media", StaticFiles(directory="media"), name="media")
app.mount("/misc", StaticFiles(directory="misc"), name="misc")
app.mount("/fonts", StaticFiles(directory="fonts"), name="fonts")
app.mount("/lib", StaticFiles(directory="lib"), name="lib")
app.mount("/skin", StaticFiles(directory="skin"), name="skin")
app.mount("/locale", StaticFiles(directory="locale"), name="locale")

@app.get("/")
async def get():
    """Serves the index.html page."""
    return HTMLResponse(content=open("index.htm").read(), status_code=200)

@app.get("/manifest.json")
async def get_manifest():
    """Serves the manifest.json file."""
    with open("manifest.json", "r") as f:
        return json.loads(f.read())

@app.get("/fonts.css")
async def get_fonts_css():
    """Serves the fonts.css file."""
    with open("fonts.css", "r") as f:
        return HTMLResponse(content=f.read(), media_type="text/css")

@app.get("/script.js")
async def get_script_js():
    """Serves the script.js file."""
    with open("script.js", "r") as f:
        return HTMLResponse(content=f.read(), media_type="application/javascript")

@app.get("/script_general.js")
async def get_script_general_js():
    """Serves the script_general.js file."""
    with open("script_general.js", "r") as f:
        return HTMLResponse(content=f.read(), media_type="application/javascript")

@app.get("/scorm.js")
async def get_scorm_js():
    """Serves the scorm.js file."""
    with open("scorm.js", "r") as f:
        return HTMLResponse(content=f.read(), media_type="application/javascript")

@app.get("/favicon.ico")
async def get_favicon():
    """Serves the favicon.ico file."""
    with open("favicon.ico", "rb") as f:
        return HTMLResponse(content=f.read(), media_type="image/x-icon")


@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """Handles WebSocket connections from the client."""
    await websocket.accept()
    print(f"WebSocket connected from client: {websocket.client}")

    # Create an async queue for audio data coming from the client
    audio_queue_from_client = asyncio.Queue()
    realtime_mode = False

    # Task to receive data from the client WebSocket (both JSON and binary)
    async def receive_from_client():
        try:
            while True:
                try:
                    # Try to receive as text first (for JSON messages)
                    message = await websocket.receive_text()
                    print(f"Received text message: {message}")
                    
                    # Parse JSON message
                    try:
                        data = json.loads(message)
                        await handle_json_message(data)
                    except json.JSONDecodeError:
                        print(f"Invalid JSON received: {message}")
                        
                except Exception:
                    # If text fails, try binary (audio data)
                    try:
                        data = await websocket.receive_bytes()
                        print(f"Received audio data: {len(data)} bytes")
                        
                        # Process the audio data for Gemini API
                        buffer_webm = io.BytesIO(data)
                        
                        try:
                            y, sr = sf.read(buffer_webm, dtype='int16')
                            # Ensure mono if stereo
                            if y.ndim > 1:
                                y = y.mean(axis=1)

                            # Resample to 16kHz
                            y_resampled = librosa.resample(y, orig_sr=sr, target_sr=16000)
                            
                            # Convert back to raw PCM 16-bit bytes
                            audio_bytes_pcm = y_resampled.astype('int16').tobytes() 
                            
                            await audio_queue_from_client.put(audio_bytes_pcm)
                        except Exception as e:
                            print(f"Error processing client audio chunk: {e}")
                            continue
                            
                    except Exception as e:
                        print(f"Error receiving data: {e}")
                        break

        except WebSocketDisconnect:
            print("Client disconnected.")
        except Exception as e:
            print(f"Error in receive_from_client: {e}")
        finally:
            # Signal that no more client audio will be coming
            await audio_queue_from_client.put(None)

    # Handle JSON messages from client
    async def handle_json_message(data):
        nonlocal realtime_mode
        
        message_type = data.get('type')
        print(f"Handling JSON message type: {message_type}")
        
        if message_type == 'ai_greeting':
            # Send AI greeting
            greeting_text = data.get('message', 'Hello! How can I help you today?')
            print(f"Sending AI greeting: {greeting_text}")
            
            # Generate audio greeting using Gemini
            await generate_and_send_greeting(greeting_text)
            
        elif message_type == 'start_realtime_voice':
            realtime_mode = True
            print("Started realtime voice mode")
            await websocket.send_text(json.dumps({
                'type': 'realtime_status',
                'status': 'Realtime voice chat started'
            }))
            
        elif message_type == 'stop_realtime_voice':
            realtime_mode = False
            print("Stopped realtime voice mode")
            await websocket.send_text(json.dumps({
                'type': 'realtime_status', 
                'status': 'Realtime voice chat stopped'
            }))
    
    # Generate and send AI greeting
    async def generate_and_send_greeting(greeting_text):
        try:
            print(f"Generating AI greeting: {greeting_text}")
            
            # Use the main Gemini Live session to generate audio greeting
            # Connect to Gemini Live API for audio generation
            async with client.aio.live.connect(model=model, config=config) as greeting_session:
                print("Connected to Gemini Live for greeting generation")
                
                # Send text input using the correct method with proper Content object
                from google.genai.types import Content, Part
                
                content = Content(
                    parts=[Part.from_text(text=greeting_text)],
                    role="user"
                )
                
                
                await greeting_session.send(content)
                print("Sent greeting text to Gemini Live")
                
                # Receive and send the audio response
                async for response in greeting_session.receive():
                    print(f"Received greeting response: {response}")
                    
                    if response.data is not None:
                        print(f"Sending greeting audio: {len(response.data)} bytes")
                        
                        # Send binary data directly as a WebSocket message
                        await websocket.send_bytes(response.data)
                        break  # Send only the first audio response for greeting
                        
                    if hasattr(response, 'text') and response.text:
                        print(f"Greeting text: {response.text}")
                        
        except Exception as e:
            print(f"Error generating greeting: {e}")
            import traceback
            traceback.print_exc()
            
            # Send fallback greeting completion
            await websocket.send_text(json.dumps({
                'type': 'greeting_complete',
                'message': greeting_text
            }))

    # Task to send audio data to the client WebSocket
    async def send_to_client(gemini_session):
        try:
            async for response in gemini_session.receive():
                if hasattr(response, 'server_content') and response.server_content:
                    server_content = response.server_content
                    if hasattr(server_content, 'model_turn') and server_content.model_turn:
                        model_turn = server_content.model_turn
                        for part in model_turn.parts:
                            if hasattr(part, 'inline_data') and part.inline_data:
                                audio_data = part.inline_data.data
                                print(f"Sending AI response audio: {len(audio_data)} bytes")
                                
                                # Send binary audio data directly
                                await websocket.send_bytes(audio_data)
                    
                    # Handle turn completion for conversation management
                    if hasattr(server_content, 'turn_complete') and server_content.turn_complete:
                        await websocket.send_text(json.dumps({
                            'type': 'voice_activity',
                            'ai_speaking': False
                        }))
                    
        except asyncio.CancelledError:
            print("send_to_client task cancelled.")
        except Exception as e:
            print(f"Error in send_to_client: {e}")

    # Connect to Gemini Live API
    async with client.aio.live.connect(model=model, config=config) as session:
        print("Connected to Gemini Live API.")

        # Start the task for receiving from client
        client_receiver_task = asyncio.create_task(receive_from_client())

        # Start the task for sending to client
        gemini_sender_task = asyncio.create_task(send_to_client(session))

        try:
            # Loop to take audio from queue and send to Gemini API
            while True:
                audio_chunk = await audio_queue_from_client.get()
                if audio_chunk is None: # Sentinel for client closing connection
                    print("No more client audio, stopping Gemini input.")
                    break # Exit the loop and close Gemini session

                # Send audio chunk to Gemini using correct method
                await session.send(types.LiveClientRealtimeInput(
                    audio=types.Blob(data=audio_chunk, mime_type="audio/pcm;rate=16000")
                ))
                
                # Check if the client receiver task is still running
                if client_receiver_task.done():
                    # If client disconnected, break this loop too
                    if not client_receiver_task.exception():
                        print("Client receiver task finished normally, closing.")
                    else:
                        print(f"Client receiver task ended with exception: {client_receiver_task.exception()}")
                    break

        except WebSocketDisconnect:
            print("WebSocket disconnected during Gemini interaction.")
        except asyncio.CancelledError:
            print("Main WebSocket task cancelled.")
        except Exception as e:
            print(f"An error occurred in main WebSocket loop: {e}")
        finally:
            print("Closing Gemini session and cancelling tasks...")
            # Ensure all tasks are cancelled and cleaned up
            gemini_sender_task.cancel()
            client_receiver_task.cancel()
            try:
                await gemini_sender_task
            except asyncio.CancelledError:
                pass
            try:
                await client_receiver_task
            except asyncio.CancelledError:
                pass
            print("WebSocket session ended.")


# --- To run this server ---
# 1. Install necessary libraries (if you haven't already):
#    pip install "fastapi[all]" uvicorn google-generativeai librosa soundfile
# 2. Set your Gemini API Key as an environment variable:
#    export GEMINI_API_KEY="YOUR_ACTUAL_GEMINI_API_KEY"
#    (On Windows: set GEMINI_API_KEY=YOUR_ACTUAL_GEMINI_API_KEY)
# 3. Create a folder named 'static' in the same directory as this Python script (e.g., 'main.py').
# 4. Place your 'index.html' file inside the 'static' folder.
# 5. Make sure your 'index.html' contains the client-side JavaScript logic
#    (the <script> section provided in the previous response) to connect to the WebSocket.
# 6. Run the server from your terminal:
#    uvicorn main:app --host 0.0.0.0 --port 8000
# 7. Open your browser and navigate to `http://localhost:8000`.
